#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

"""
ABOUT: This is the main entry for the pipeline.
REQUIRES:
  - python>=3.6
  - snakemake   (recommended>=6.0.0)
  - singularity (recommended==latest)
DISCLAIMER:
                    PUBLIC DOMAIN NOTICE
        NIAID Collaborative Bioinformatics Resource (NCBR)
   National Institute of Allergy and Infectious Diseases (NIAID)
This software/database is a "United  States Government Work" under
the terms of the United  States Copyright Act.  It was written as 
part of the author's official duties as a United States Government
employee and thus cannot be copyrighted. This software is freely
available to the public for use.
Although all  reasonable  efforts have been taken  to ensure  the
accuracy and reliability of the software and data, NCBR do not and
cannot warrant the performance or results that may  be obtained by 
using this software or data. NCBR and NIH disclaim all warranties,
express  or  implied,  including   warranties   of   performance, 
merchantability or fitness for any particular purpose.
Please cite the author and NIH resources like the "Biowulf Cluster" 
in any work or product based on this material.
USAGE:
  $ methyl-seek <command> [OPTIONS]
EXAMPLE:
  $ methyl-seek run --input *.R?.fastq.gz --output output/ --genome hg38
"""

# Python standard library
from __future__ import print_function
import sys, os, subprocess, re, json, textwrap

# 3rd party imports from pypi
import argparse  # potential python3 3rd party package, added in python/3.5

# Local imports
from src import version 
from src.run import init, setup, bind, dryrun, runner
from src.files import groups, contrasts
from src.utils import (
    Colors,
    err,
    exists,
    fatal,
    hashed,
    permissions,
    check_cache,
    require
)


# Pipeline Metadata
__version__ = version
__authors__ = 'Neelam Redekar, Tom Hill, Skyler Kuhn'
__email__ = 'skyler.kuhn@nih.gov'
__home__  =  os.path.dirname(os.path.abspath(__file__))
_name = os.path.basename(sys.argv[0])
_description = 'An awesome Bisulphite-sequencing DNA methylation pipeline'


def unlock(sub_args):
    """Unlocks a previous runs output directory. If snakemake fails ungracefully,
    it maybe required to unlock the working directory before proceeding again.
    This is rare but it does occasionally happen. Maybe worth add a --force
    option to delete the '.snakemake/' directory in the future.
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for unlock sub-command
    """
    print("Unlocking the pipeline's output directory...")
    outdir = sub_args.output

    try:
        unlock_output = subprocess.check_output([
            'snakemake', '--unlock',
            '--cores', '1',
            '--configfile=config.json'
        ], cwd = outdir,
        stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        # Unlocking process returned a non-zero exit code
        sys.exit("{}\n{}".format(e, e.output))

    print("Successfully unlocked the pipeline's working directory!")


def run(sub_args):
    """Initialize, setup, and run the pipeline.
    Calls initialize() to create output directory and copy over pipeline resources,
    setup() to create the pipeline config file, dryrun() to ensure their are no issues
    before running the pipeline, and finally run() to execute the Snakemake workflow.
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for run sub-command
    """
    # Step 0. Check for required dependencies
    # The pipelines has only two requirements:
    # snakemake and singularity 
    require(['snakemake', 'singularity'], ['snakemake', 'singularity'])
    c = Colors()

    # Step 1. Initialize working directory,
    # copy over required resources to run 
    # the pipeline
    git_repo = __home__
    input_files = init(
        repo_path = git_repo,
        output_path = sub_args.output,
        links = sub_args.input
    )

    # Step 2. Setup pipeline for execution, 
    # dynamically create config.json config
    # file from user inputs and base config
    # templates
    config = setup(sub_args, 
        ifiles = input_files,
        repo_path = git_repo,
        output_path = sub_args.output
    )

    # Step 3. Resolve docker/singularity bind
    # paths from the config file.
    bindpaths = bind(
        sub_args,
        config = config
    )

    config['bindpaths'] = bindpaths

    # Add groups.tsv and contrast.tsv file
    # information, groups.tsv file defines
    # relationships between samples and
    # their group(s). The contrast.tsv file
    # defines comparsions to be made across
    # different groups of samples. Add this
    # information to config.json
    config["project"]["groups"] = {}
    config["project"]["contrast"] = []
    if (sub_args.differential_methylation_analysis and sub_args.groups and sub_args.contrasts):
        group2samples = groups(sub_args.groups, delim='\t')
        # Adding some basic validation to ensure
        # all the samples in the groups.tsv are
        # have fastq files (checking for typos)
        groups_samples = []
        for samplelist in group2samples.values():
            for sample in samplelist:
                if sample not in samplelist:
                    groups_samples.append(sample)
        # Check for things in the groups file
        # that don't have input fastqs
        missing_inputs = []
        for s in groups_samples:
            if s not in config["samples"]:
                # Collect all samples list in the groups
                # file that do not have input fastq files
                missing_inputs.append(s)
        # Check what's missing and report the problem
        if missing_inputs:
            # Report missing FastQ files that
            # were not provided and display a
            # helpful message to fix problem
            err(
                "{}{}Error: --groups file contains the following samples with missing FastQ files! {}".format(
                    c.bg_red, c.white, c.end
                )
            )
            fatal("  └── {}".format(missing_inputs))

        config["project"]["groups"] = group2samples
        # Add contrast information to config.json
        user_defined_groups = list(group2samples.keys())
        comparsions = contrasts(sub_args.contrasts, user_defined_groups)
        config["project"]["contrast"] = comparsions


    # Step 4. Save config to output directory
    with open(os.path.join(sub_args.output, 'config.json'), 'w') as fh:
        json.dump(config, fh, indent = 4, sort_keys = True)

    # Optional Step: Dry-run pipeline
    if sub_args.dry_run:
        # Dryrun pipeline
        dryrun_output = dryrun(outdir = sub_args.output) # python3 returns byte-string representation
        print("\nDry-running {} pipeline:\n{}".format(_name, dryrun_output.decode("utf-8")))
        sys.exit(0)

    # Step 5. Orchestrate pipeline execution,
    # run pipeline in locally on a compute node
    # for debugging purposes or submit the master
    # job to the job scheduler, SLURM, and create 
    # logging file
    if not exists(os.path.join(sub_args.output, 'logfiles')):
        # Create directory for logfiles
        os.makedirs(os.path.join(sub_args.output, 'logfiles'))
    if sub_args.mode == 'local':
        log = os.path.join(sub_args.output, 'logfiles', 'snakemake.log')
    else: 
        log = os.path.join(sub_args.output, 'logfiles', 'master.log')
    logfh = open(log, 'w')
    mjob = runner(mode = sub_args.mode, 
        outdir = sub_args.output, 
        # additional_bind_paths = all_bind_paths,
        alt_cache = sub_args.singularity_cache,  
        threads = int(sub_args.threads),
        jobname = sub_args.job_name,
        submission_script=os.path.join(__home__, 'src', 'run.sh'),
        logger = logfh,
        additional_bind_paths = ",".join(bindpaths),
        tmp_dir = sub_args.tmp_dir, 
    )
    
    # Step 6. Wait for subprocess to complete,
    # this is blocking and not asynchronous
    if not sub_args.silent:
        print("\nRunning {} pipeline in '{}' mode...".format(_name, sub_args.mode)) 
    mjob.wait()
    logfh.close()

    # Step 7. Relay information about submission
    # of the master job or the exit code of the 
    # pipeline that ran in local mode
    if sub_args.mode == 'local':
        if int(mjob.returncode) == 0:
            print('{} pipeline has successfully completed'.format(_name))
        else:
            fatal('{} pipeline failed. Please see {} for more information.'.format(_name,
                os.path.join(sub_args.output, 'logfiles', 'snakemake.log')))
    elif sub_args.mode == 'slurm':
        jobid = open(os.path.join(sub_args.output, 'logfiles', 'mjobid.log')).read().strip()
        if not sub_args.silent:
            if int(mjob.returncode) == 0:
                print('Successfully submitted master job: ', end="")
            else:
                fatal('Error occurred when submitting the master job.')
        print(jobid)


def cache(sub_args):
    """Caches remote resources or reference files stored on DockerHub and S3.
    Local SIFs will be created from images defined in 'config/containers/images.json'.
    @TODO: add option to cache other shared S3 resources (i.e. kraken db and fqscreen indices)
    @param sub_args <parser.parse_args() object>:
        Parsed arguments for unlock sub-command
    """
    print(sub_args)
    fatal('NotImplementedError... Comming Soon!')

 
def parsed_arguments(name, description):
    """Parses user-provided command-line arguments. Requires argparse and textwrap
    package. argparse was added to standard lib in python 3.5 and textwrap was added
    in python 3.5. To create custom help formatting for subparsers a docstring is
    used create the help message for required options. argparse does not support named
    subparser groups, which is normally what would be used to accomphish this reformatting.
    As so, the help message for require options must be suppressed. If a new required arg
    is added to a subparser, it must be added to the docstring and the usage statement
    also must be updated.
    @param name <str>:
        Name of the pipeline or command-line tool 
    @param description <str>:
        Short description of pipeline or command-line tool 
    """
    # Add styled name and description
    c = Colors
    styled_name = "{0}{1}{2}methyl-seek{3}".format(c.bold, c.bg_black, c.cyan, c.end)
    description = "{0}{1}{2}".format(c.bold, description, c.end)

    # Create a top-level parser
    parser = argparse.ArgumentParser(description = '{}: {}'.format(styled_name, description))

    # Adding Verison information
    parser.add_argument('--version', action = 'version', version='%(prog)s {}'.format(__version__))

    # Create sub-command parser
    subparsers = parser.add_subparsers(help='List of available sub-commands')

    # Sub-parser for the "run" sub-command
    # Grouped sub-parser arguments are currently 
    # not supported: https://bugs.python.org/issue9341
    # Here is a work around to create more useful help message for named
    # options that are required! Please note: if a required arg is added the
    # description below should be updated (i.e. update usage and add new option)
    required_run_options = textwrap.dedent("""\
        {0}: {1}

        {3}{4}Synopsis:{5}
          $ {2} run [--help] \\
                [--dry-run] [--job-name JOB_NAME] [--mode {{slurm,local}}] \\
                [--sif-cache SIF_CACHE] [--singularity-cache SINGULARITY_CACHE] \\
                [--silent] [--threads THREADS] [--tmp-dir TMP_DIR] \\
                [--differential-methylation-analysis] [--groups GROUPS] \\
                [--contrasts CONTRASTS] [--cell-free-deconvolution] \\
                --input INPUT [INPUT ...] \\
                --output OUTPUT \\
                --genome GENOME

        Optional arguments are shown in square brackets above.

        {3}{4}Description:{5}
          To run the bisulphite-sequencing-based DNA methylation pipeline name with 
        your data raw data, please provide a space seperated list of FastQs (globbing
        is supported), reference genome, and an output directory to store results.

        {3}{4}Required arguments:{5}
          --input INPUT [INPUT ...]
                                Input FastQ file(s) to process. The pipeline does NOT
                                support single-end data. FastQ files for one or more  
                                samples can be provided. Multiple input FastQ files
                                should be seperated by a space. Globbing for multiple
                                file is also supported.
                                  Example: --input .tests/*.R?.fastq.gz
          --output OUTPUT
                                Path to an output directory. This location is where
                                the pipeline will create all of its output files, also
                                known as the pipeline's working directory. If the user
                                provided working directory has not been initialized,
                                it will be created automatically.
                                  Example: --output /data/$USER/output
          --genome GENOME       
                                Reference genome. This option defines the reference
                                genome of the samples for alignment and identification
                                of CpG sites. There are pre-built reference files for 
                                human, mouse, and rat samples. Currently, hg38 is the
                                only reference genome the works with the deconvolution
                                steps, which are enabled via the "--dcv" option. 
                                Please select from one of the following options:
                                    • hg38
                                    • hg19
                                    • mm10
                                    • rn6
                                  Example: --genome hg38

        {3}{4}Analysis options:{5}
        {6}@Differential methylation analysis{5}
          --differential-methylation-analysis                 
                                Identifies differentially methylated regions (DMR) and
                                differentially methylated CpG sites. If this option is
                                provided, then differential methylation analysis will
                                be performed for contrasts and groups defined via the
                                --contrasts and --groups options.  As so, this option
                                must be provided with the  --groups  AND  --contrasts
                                options.  Please see below for more information about 
                                each of these options. Please note: If the groups and
                                contrasts files are not provided, then no differential 
                                comparisons will be made!
                                  Example: --dmr
          --groups GROUPS
                                Groups file. This tab delimited file is used to pair
                                each sample to a group. Group information is used to
                                setup comparsions across different groups of samples
                                to find differential methylated regions (DMRs) or CpG
                                sites. This tab-delimited file consists of two columns
                                containing the base name of each sample AND the name of
                                their group(s), where multiple groups seperated by a 
                                comma. The header of this file needs to be Sample for
                                the column containing the sample base names and Group
                                for the column containing the group names. The base
                                name of a given sample can be determined by removing
                                its file extension from the sample's R1 FastQ file,
                                for example: WT_S4.R1.fastq.gz becomes WT_S4 in the
                                groups file. A group can represent anything from a
                                timepoint, an experimental condition, a treatment,
                                or disease state, etc. 
                                Please note that groups are should be composed of
                                alphanumeric characters, cannot startwith a number,
                                and cannot contain any '-' characters. Groups can
                                contain '_' character.
                                  Contents of example groups file:
                                    Sample	Group
                                    WT_S1	G1,G3
                                    WT_S2	G1,G3
                                    WT_S3	G1
                                    WT_S4	G2,G4
                                    WT_S5	G2,G4
                                    WT_S6	G2
                                  Example: --groups /data/$USER/groups.tsv   
          --contrasts CONTRASTS
                                Contrasts file. This tab delimited file is used to setup
                                comparisons within different groups of samples. Please 
                                see the --groups option above for more information about 
                                how to define groups within a set of samples. This file
                                consists of two columns containing the names of each 
                                group to compare. The names defined in this file must 
                                also exist in the groups file.
                                  Contents of example contrasts file:
                                    G2  G1
                                    G4  G1
                                    G4  G3
                                  Example: --contrasts /data/$USER/contrasts.tsv 

        {6}@Cell-free DNA Deconvolution{5}
          --cell-free-deconvolution                 
                                Identifies cells/tissue origin for cfDNA. If this 
                                option is provided, several deconvolution algorithms
                                are employed to compare the CpG methylation profiles
                                of a given sample against known methylation profiles
                                from different tissues types. This option can be used
                                to deconvole the tissue or cell-type source of cell-
                                free DNA.
                                  Example: --dcv
                                 
        {3}{4}Orchestration options:{5}
          --mode {{slurm,local}}  
                                Method of execution. Defines the mode of execution. 
                                Vaild options for this mode include: local or slurm. 
                                Additional modes of exection are coming soon, default:  
                                slurm.
                                Here is a brief description of each mode:
                                   • local: uses local method of execution. local runs 
                                will run serially on compute instance. This is useful 
                                for testing, debugging, or when a users does not have
                                access to a  high  performance  computing environment.
                                If this option is not provided, it will default to a 
                                slurm mode of execution. 
                                   • slurm: uses slurm execution backend. This method 
                                will submit jobs to a  cluster  using sbatch. It is 
                                recommended running the pipeline in this mode as it 
                                will be significantly faster. 
                                  Example: --mode slurm
          --job-name JOB_NAME   
                                Overrides the name of the pipeline's master job. When 
                                submitting the pipeline to a jobscheduler, this option
                                overrides the default name of the master job. This can 
                                be useful for tracking the progress or status of a run, 
                                default: pl:{2}.
                                  Example: --job-name {2}_03-14.1592
          --dry-run             
                                Does not execute anything. Only displays what steps in
                                the pipeline remain or will be run.
                                  Example: --dry-run
          --silent              
                                Silence standard output. This will reduces the amount 
                                of information displayed to standard  output  when the 
                                master job is submitted to the job scheduler. Only the 
                                job id of the master job is returned.
                                  Example: --silent
          --singularity-cache SINGULARITY_CACHE
                                Overrides the $SINGULARITY_CACHEDIR variable. Images
                                from remote registries are cached locally on the file
                                system. By default, the singularity cache is set to:
                                '/path/to/output/directory/.singularity/'. Please note
                                that this cache cannot be shared across users.
                                  Example: --singularity-cache /data/$USER
          --sif-cache SIF_CACHE
                                Path where a local cache of SIFs are stored. This cache
                                can be shared across users if permissions are properly
                                setup. If a SIF does not exist in the SIF cache, the
                                image will be pulled from Dockerhub. {2} cache
                                sub command can be used to create a local SIF cache. 
                                Please see {2} cache for more information.
                                   Example: --sif-cache /data/$USER/sifs/
          --tmp-dir TMP_DIR     
                                Path on the file system for writing temporary output 
                                files. By default, the temporary directory is set to 
                                '/lscratch/$SLURM_JOBID' for backwards compatibility 
                                with the NIH's Biowulf cluster; however, if you are 
                                running the pipeline on another cluster, this option 
                                will need to be specified. Ideally, this path should 
                                point to a dedicated location on the filesystem for 
                                writing tmp files. On many systems, this location is 
                                set to somewhere in /scratch. If you need to inject a 
                                variable into this string that should NOT be expanded, 
                                please quote this options value in single quotes. 
                                  Example: --tmp-dir '/scratch/$USER/'
          --threads THREADS     
                                Max number of threads for local processes. It is
                                recommended setting this vaule to the maximum number 
                                of CPUs available on the host machine, default: 2.
                                  Example: --threads: 16
        
        {3}{4}Misc Options:{5}
          -h, --help            Show usage information, help message, and exit.
                                  Example: --help
        """.format(styled_name, description, name, c.bold, c.url, c.end, c.italic))

    # Display example usage in epilog
    run_epilog = textwrap.dedent("""\
        {2}{3}Example:{4}
          # Step 1.) Grab an interactive node,
          # do not run on head node!
          srun -N 1 -n 1 --time=1:00:00 --mem=8gb  --cpus-per-task=2 --pty bash
          module purge
          module load singularity snakemake

          # Step 2A.) Dry-run the pipeline
          ./{0} run --input .tests/*.R?.fastq.gz \\
                         --output /data/$USER/output \\
                         --genome hg38 \\
                         --mode slurm \\
                         --dry-run

          # Step 2B.) Run the {0} pipeline
          # The slurm mode will submit jobs to 
          # the cluster. It is recommended running 
          # the pipeline in this mode.
          ./{0} run --input .tests/*.R?.fastq.gz \\
                         --output /data/$USER/output \\
                         --genome hg38 \\
                         --mode slurm

        {2}{3}Version:{4}
          {1}
        """.format(name, __version__, c.bold, c.url, c.end))

    # Supressing help message of required args to overcome no sub-parser named groups
    subparser_run = subparsers.add_parser('run',
        help = 'Run the {} pipeline with input files.'.format(name),
        usage = argparse.SUPPRESS,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description = required_run_options,
        epilog  = run_epilog,
        add_help=False
    )

    # Required Arguments
    # Input FastQ files
    subparser_run.add_argument(
        '--input',
        # Check if the file exists and if it is readable
        type = lambda file: permissions(parser, file, os.R_OK),
        required = True,
        nargs = '+',
        help = argparse.SUPPRESS
    )

    # Output Directory, i.e 
    # working directory
    subparser_run.add_argument(
        '--output',
        type = lambda option: os.path.abspath(os.path.expanduser(option)),
        required = True,
        help = argparse.SUPPRESS
    )

    # Reference genome
    subparser_run.add_argument(
        "--genome",
        required=True,
        type=str,
        choices=["hg38", "hg19", "mm10", "rn6"],
        help=argparse.SUPPRESS,
    )

    # Optional Arguments
    # Add custom help message
    subparser_run.add_argument(
        '-h', '--help', 
        action='help', 
        help=argparse.SUPPRESS
    )
    
    # Analysis options
    # Runs the dmr mode steps
    subparser_run.add_argument(
        "--differential-methylation-analysis",
        action="store_true",
        required=False,
        default=False,
        help=argparse.SUPPRESS,
    )

    # Groups TSV file to map
    # samples to groups
    subparser_run.add_argument(
        "--groups",
        # Check if the file exists and if it is readable
        type=lambda file: permissions(parser, file, os.R_OK),
        required=False,
        default=None,
        help=argparse.SUPPRESS,
    )

    # Contrasts file to find differentially
    # methylated regions (DMRs)
    subparser_run.add_argument(
        "--contrasts",
        # Check if the file exists and if it is readable
        type=lambda file: permissions(parser, file, os.R_OK),
        required=False,
        default=None,
        help=argparse.SUPPRESS,
    )

    # Runs the dcv mode steps,
    # only works with hg38
    subparser_run.add_argument(
        "--cell-free-deconvolution",
        action="store_true",
        required=False,
        default=False,
        help=argparse.SUPPRESS,
    )

    # Orchestration Options
    # Execution Method, run locally 
    # on a compute node or submit to 
    # a supported job scheduler, etc.
    subparser_run.add_argument(
        '--mode',
        type = str,
        required = False,
        default = "slurm",
        choices = ['slurm', 'local'],
        help = argparse.SUPPRESS
    )

    # Name of master job
    subparser_run.add_argument(
        '--job-name',
        type = str,
        required = False,
        default = 'pl:{}'.format(name),
        help = argparse.SUPPRESS
    )

    # Dry-run
    # Do not execute the workflow, 
    # prints what steps remain
    subparser_run.add_argument(
        '--dry-run',
        action = 'store_true',
        required = False,
        default = False,
        help = argparse.SUPPRESS
    )

    # Silent output mode
    subparser_run.add_argument(
        '--silent',
        action = 'store_true',
        required = False,
        default = False,
        help = argparse.SUPPRESS
    )
    
    # Singularity cache directory,
    # default uses output directory
    subparser_run.add_argument(
        '--singularity-cache',
        type = lambda option: check_cache(parser, os.path.abspath(os.path.expanduser(option))),
        required = False,
        help = argparse.SUPPRESS
    )
    
    # Local SIF cache directory, 
    # default pull from Dockerhub
    subparser_run.add_argument(
        '--sif-cache',
        type = lambda option: os.path.abspath(os.path.expanduser(option)),
        required = False,
        help = argparse.SUPPRESS
    )

    # Base directory to write 
    # temporary/intermediate files 
    subparser_run.add_argument(
        '--tmp-dir',
        type = str,
        required = False,
        default = '/lscratch/$SLURM_JOBID/',
        help = argparse.SUPPRESS
    )

    # Number of threads for the 
    # pipeline's main proceess
    # This is only applicable for 
    # local rules or when running 
    # in local mode.
    subparser_run.add_argument(
        '--threads',
        type = int,
        required = False,
        default = 2,
        help = argparse.SUPPRESS
    )
    
    # Sub-parser for the "unlock" sub-command
    # Grouped sub-parser arguments are currently 
    # not supported: https://bugs.python.org/issue9341
    # Here is a work around to create more useful help message for named
    # options that are required! Please note: if a required arg is added the
    # description below should be updated (i.e. update usage and add new option)
    required_unlock_options = textwrap.dedent("""\
        {0}: {1}

        {3}{4}Synopsis:{5} 
          $ {2} unlock [-h] --output OUTPUT
    
        Optional arguments are shown in square brackets above.

        {3}{4}Description:{5}
          If the pipeline fails ungracefully, it maybe required to unlock
        the working directory before proceeding again. Please verify that 
        the pipeline is not running before running this command. If the 
        pipeline is still running, the workflow manager will report the 
        working directory is locked. This is normal behavior. Do NOT run 
        this command if the pipeline is still running.

        {3}{4}Required arguments:{5}
          --output OUTPUT       Path to a previous run's output directory
                                to unlock. This will remove a lock on the 
                                working directory. Please verify that the 
                                pipeline is not running before running 
                                this command.
                                  Example: --output /data/$USER/output

        {3}{4}Misc Options:{5}
          -h, --help            Show usage information, help message, 
                                and exit.
                                  Example: --help
        """.format(styled_name, description, name, c.bold, c.url, c.end))

    # Display example usage in epilog
    unlock_epilog = textwrap.dedent("""\
        {2}{3}Example:{4}
          # Unlock output directory of pipeline
          {0} unlock --output /data/$USER/output

        {2}{3}Version:{4}
          {1}
        """.format(name, __version__, c.bold, c.url, c.end))

    # Supressing help message of required args to overcome no sub-parser named groups
    subparser_unlock = subparsers.add_parser(
        'unlock',
        help = 'Unlocks a previous runs output directory.',
        usage = argparse.SUPPRESS,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description = required_unlock_options,
        epilog = unlock_epilog,
        add_help = False
    )

    # Required Arguments
    # Output Directory (analysis working directory)
    subparser_unlock.add_argument(
        '--output',
        type = str,
        required = True,
        help = argparse.SUPPRESS
    )

    # Add custom help message
    subparser_unlock.add_argument(
        '-h', '--help', 
        action='help', 
        help=argparse.SUPPRESS
    )


    # Sub-parser for the "cache" sub-command
    # Grouped sub-parser arguments are 
    # not supported: https://bugs.python.org/issue9341
    # Here is a work around to create more useful help message for named
    # options that are required! Please note: if a required arg is added the
    # description below should be updated (i.e. update usage and add new option)
    required_cache_options = textwrap.dedent("""\
        {0}: {1}

        {3}{4}Synopsis:{5} 
          $ {2} cache [-h] [--dry-run] --sif-cache SIF_CACHE

        Optional arguments are shown in square brackets above.

        {3}{4}Description:{5}
          Creates a local cache resources hosted on DockerHub or AWS S3.
        These resources are normally pulled onto the filesystem when the
        pipeline runs; however, due to network issues or DockerHub pull
        rate limits, it may make sense to pull the resources once so a
        shared cache can be created. It is worth noting that a singularity
        cache cannot normally be shared across users. Singularity strictly
        enforces that a cache is owned by the user. To get around this
        issue, the cache subcommand can be used to create local SIFs on
        the filesystem from images on DockerHub.

        {3}{4}Required arguments:{5}
          --sif-cache SIF_CACHE
                                Path where a local cache of SIFs will be 
                                stored. Images defined in containers.json
                                will be pulled into the local filesystem. 
                                The path provided to this option can be 
                                passed to the --sif-cache option of the
                                run sub command. Please see {2} 
                                run sub command for more information.
                                  Example: --sif-cache /data/$USER/cache
        
        {3}{4}Orchestration options:{5}
          --dry-run             Does not execute anything. Only displays 
                                what remote resources would be pulled.
                                  Example: --dry-run
    
        {3}{4}Misc Options:{5}
          -h, --help            Show usage information, help message, 
                                and exits.
                                  Example: --help
    
        """.format(styled_name, description, name, c.bold, c.url, c.end))

    # Display example usage in epilog
    cache_epilog = textwrap.dedent("""\
        {2}{3}Example:{4}
          # Cache remote resources of pipeline
          {0} cache --sif-cache /data/$USER/cache
    
        {2}{3}Version:{4}
          {1}
        """.format(name, __version__, c.bold, c.url, c.end))

    # Supressing help message of required args to overcome no sub-parser named groups
    subparser_cache = subparsers.add_parser(
        'cache',
        help = 'Cache remote resources locally.',
        usage = argparse.SUPPRESS,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description = required_cache_options,
        epilog = cache_epilog,
        add_help = False
    )

    # Required Arguments
    # Output Directory (analysis working directory)
    subparser_cache.add_argument(
        '--sif-cache',
        type = lambda option: os.path.abspath(os.path.expanduser(option)),
        required = True,
        help = argparse.SUPPRESS
    )

    # Optional Arguments
    # Dry-run cache command (do not pull any remote resources)
    subparser_cache.add_argument(
        '--dry-run',
        action = 'store_true',
        required = False,
        default = False,
        help=argparse.SUPPRESS
    )

    # Add custom help message
    subparser_cache.add_argument(
        '-h', '--help', 
        action='help', 
        help=argparse.SUPPRESS
    )

    # Define handlers for each sub-parser
    subparser_run.set_defaults(func = run)
    subparser_unlock.set_defaults(func = unlock)
    subparser_cache.set_defaults(func = cache)

    # Parse command-line args
    args = parser.parse_args()
    return args


def main():

    # Sanity check for usage
    if len(sys.argv) == 1:
        # Nothing was provided
        fatal('Invalid usage: {} [-h] [--version] ...'.format(_name))

    # Collect args for sub-command
    args = parsed_arguments(
        name = _name,
        description = _description
    )

    # Display version information
    err('{} ({})'.format(_name, __version__))

    # Mediator method to call sub-command's set handler function
    args.func(args)


if __name__ == '__main__':
    main()
